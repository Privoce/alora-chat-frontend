{"ast":null,"code":"import _classCallCheck from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport io from 'socket.io-client';\nimport constants from 'modules/constants';\nimport MediaDevice from './MediaDevice';\nimport Emitter from './Emitter';\nvar PC_CONFIG = {\n  iceServers: [{\n    urls: ['stun:stun.l.google.com:19302']\n  }]\n};\n\nvar PeerConnection =\n/*#__PURE__*/\nfunction (_Emitter) {\n  _inherits(PeerConnection, _Emitter);\n\n  /**\n   * Create a PeerConnection.\n   * @param {String} friendID - ID of the friend you want to call.\n   */\n  function PeerConnection(friendID) {\n    var _this;\n\n    _classCallCheck(this, PeerConnection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PeerConnection).call(this));\n    _this.pc = new RTCPeerConnection(PC_CONFIG);\n    _this.socket = io(constants.API.ROOT);\n\n    _this.pc.onicecandidate = function (event) {\n      return _this.socket.emit('call', {\n        to: _this.friendID,\n        candidate: event.candidate\n      });\n    };\n\n    _this.pc.ontrack = function (event) {\n      return _this.emit('peerStream', event.streams[0]);\n    };\n\n    _this.mediaDevice = new MediaDevice();\n    _this.friendID = friendID;\n    return _this;\n  }\n  /**\n   * Starting the call\n   * @param {Boolean} isCaller\n   * @param {Object} config - configuration for the call {audio: boolean, video: boolean}\n   */\n\n\n  _createClass(PeerConnection, [{\n    key: \"start\",\n    value: function start(isCaller, config) {\n      var _this2 = this;\n\n      alert('start');\n      this.mediaDevice.on('stream', function (stream) {\n        stream.getTracks().forEach(function (track) {\n          _this2.pc.addTrack(track, stream);\n        });\n\n        _this2.emit('localStream', stream);\n\n        if (isCaller) {\n          _this2.socket.emit('request', {\n            to: _this2.friendID\n          });\n        } else _this2.createOffer();\n      }).start(config);\n      return this;\n    }\n    /**\n     * Stop the call\n     * @param {Boolean} isStarter\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(isStarter) {\n      if (isStarter) {\n        this.socket.emit('end', {\n          to: this.friendID\n        });\n      }\n\n      this.mediaDevice.stop();\n      this.pc.close();\n      this.pc = null;\n      this.off();\n      return this;\n    }\n  }, {\n    key: \"createOffer\",\n    value: function createOffer() {\n      this.pc.createOffer().then(this.getDescription.bind(this)).catch(function (err) {\n        return console.log(err);\n      });\n      return this;\n    }\n  }, {\n    key: \"createAnswer\",\n    value: function createAnswer() {\n      this.pc.createAnswer().then(this.getDescription.bind(this)).catch(function (err) {\n        return console.log(err);\n      });\n      return this;\n    }\n  }, {\n    key: \"getDescription\",\n    value: function getDescription(desc) {\n      this.pc.setLocalDescription(desc);\n      this.socket.emit('call', {\n        to: this.friendID,\n        sdp: desc\n      });\n      return this;\n    }\n    /**\n     * @param {Object} sdp - Session description\n     */\n\n  }, {\n    key: \"setRemoteDescription\",\n    value: function setRemoteDescription(sdp) {\n      var rtcSdp = new RTCSessionDescription(sdp);\n      this.pc.setRemoteDescription(rtcSdp);\n      return this;\n    }\n    /**\n     * @param {Object} candidate - ICE Candidate\n     */\n\n  }, {\n    key: \"addIceCandidate\",\n    value: function addIceCandidate(candidate) {\n      if (candidate) {\n        var iceCandidate = new RTCIceCandidate(candidate);\n        this.pc.addIceCandidate(iceCandidate);\n      }\n\n      return this;\n    }\n  }]);\n\n  return PeerConnection;\n}(Emitter);\n\nexport default PeerConnection;","map":{"version":3,"sources":["/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/src/modules/utils/PeerConnection.js"],"names":["io","constants","MediaDevice","Emitter","PC_CONFIG","iceServers","urls","PeerConnection","friendID","pc","RTCPeerConnection","socket","API","ROOT","onicecandidate","event","emit","to","candidate","ontrack","streams","mediaDevice","isCaller","config","alert","on","stream","getTracks","forEach","track","addTrack","createOffer","start","isStarter","stop","close","off","then","getDescription","bind","catch","err","console","log","createAnswer","desc","setLocalDescription","sdp","rtcSdp","RTCSessionDescription","setRemoteDescription","iceCandidate","RTCIceCandidate","addIceCandidate"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\nimport constants from 'modules/constants';\nimport MediaDevice from './MediaDevice';\nimport Emitter from './Emitter';\n\nconst PC_CONFIG = { iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }] };\n\nclass PeerConnection extends Emitter {\n\t/**\n\t * Create a PeerConnection.\n\t * @param {String} friendID - ID of the friend you want to call.\n\t */\n\tconstructor(friendID) {\n\t\tsuper();\n\t\tthis.pc = new RTCPeerConnection(PC_CONFIG);\n\t\tthis.socket = io(constants.API.ROOT);\n\t\tthis.pc.onicecandidate = event =>\n\t\t\tthis.socket.emit('call', {\n\t\t\t\tto: this.friendID,\n\t\t\t\tcandidate: event.candidate\n\t\t\t});\n\t\tthis.pc.ontrack = event => this.emit('peerStream', event.streams[0]);\n\n\t\tthis.mediaDevice = new MediaDevice();\n\t\tthis.friendID = friendID;\n\t}\n\n\t/**\n\t * Starting the call\n\t * @param {Boolean} isCaller\n\t * @param {Object} config - configuration for the call {audio: boolean, video: boolean}\n\t */\n\tstart(isCaller, config) {\n\t\talert('start');\n\t\tthis.mediaDevice\n\t\t\t.on('stream', stream => {\n\t\t\t\tstream.getTracks().forEach(track => {\n\t\t\t\t\tthis.pc.addTrack(track, stream);\n\t\t\t\t});\n\t\t\t\tthis.emit('localStream', stream);\n\t\t\t\tif (isCaller) {\n\t\t\t\t\tthis.socket.emit('request', { to: this.friendID });\n\t\t\t\t} else this.createOffer();\n\t\t\t})\n\t\t\t.start(config);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the call\n\t * @param {Boolean} isStarter\n\t */\n\tstop(isStarter) {\n\t\tif (isStarter) {\n\t\t\tthis.socket.emit('end', { to: this.friendID });\n\t\t}\n\t\tthis.mediaDevice.stop();\n\t\tthis.pc.close();\n\t\tthis.pc = null;\n\t\tthis.off();\n\t\treturn this;\n\t}\n\n\tcreateOffer() {\n\t\tthis.pc\n\t\t\t.createOffer()\n\t\t\t.then(this.getDescription.bind(this))\n\t\t\t.catch(err => console.log(err));\n\t\treturn this;\n\t}\n\n\tcreateAnswer() {\n\t\tthis.pc\n\t\t\t.createAnswer()\n\t\t\t.then(this.getDescription.bind(this))\n\t\t\t.catch(err => console.log(err));\n\t\treturn this;\n\t}\n\n\tgetDescription(desc) {\n\t\tthis.pc.setLocalDescription(desc);\n\t\tthis.socket.emit('call', { to: this.friendID, sdp: desc });\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {Object} sdp - Session description\n\t */\n\tsetRemoteDescription(sdp) {\n\t\tconst rtcSdp = new RTCSessionDescription(sdp);\n\t\tthis.pc.setRemoteDescription(rtcSdp);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {Object} candidate - ICE Candidate\n\t */\n\taddIceCandidate(candidate) {\n\t\tif (candidate) {\n\t\t\tconst iceCandidate = new RTCIceCandidate(candidate);\n\t\t\tthis.pc.addIceCandidate(iceCandidate);\n\t\t}\n\t\treturn this;\n\t}\n}\n\nexport default PeerConnection;\n"]},"metadata":{},"sourceType":"module"}