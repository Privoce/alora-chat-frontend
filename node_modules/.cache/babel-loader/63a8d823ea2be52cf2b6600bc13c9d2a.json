{"ast":null,"code":"import _regeneratorRuntime from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(sendMessagePostFetchSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getMessagesFetchSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteMessageFetchSaga);\n\nimport { takeLatest, takeEvery, put } from \"redux-saga/effects\";\nimport { sendRequest } from \"modules/utils\";\nimport { POST_MESSAGE, GET_MESSAGES, DELETE_MESSAGE } from \"redux/constants/message\";\nimport { toast } from \"react-toastify\";\nimport constants from \"modules/constants\";\nimport * as messageActions from \"redux/actions/message\";\nimport * as conversationActions from \"redux/actions/conversation\";\n\nfunction sendMessagePostFetchSaga(action) {\n  var body, response;\n  return _regeneratorRuntime.wrap(function sendMessagePostFetchSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          body = action.params.body;\n          _context.prev = 1;\n          _context.next = 4;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.MESSAGE),\n            method: constants.API.METHODS.POST,\n            body: body\n          });\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put(messageActions.postMessageReceived());\n\n        case 7:\n          _context.next = 9;\n          return put(conversationActions.addMessageToCurrentConversationMessages({\n            message: _objectSpread({\n              currentUserIsSender: true\n            }, response.result),\n            partner: {\n              _id: response.result.receiverId\n            }\n          }));\n\n        case 9:\n          _context.next = 16;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 15;\n          return put(messageActions.postMessageReceived());\n\n        case 15:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[1, 11]]);\n}\n\nfunction getMessagesFetchSaga(action) {\n  var partnerId, query, response;\n  return _regeneratorRuntime.wrap(function getMessagesFetchSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          partnerId = action.params.partnerId;\n          query = {\n            partnerId: partnerId\n          };\n          _context2.prev = 2;\n          _context2.next = 5;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.MESSAGE),\n            method: constants.API.METHODS.GET,\n            query: query\n          });\n\n        case 5:\n          response = _context2.sent;\n          _context2.next = 8;\n          return put(messageActions.getMessagesReceived());\n\n        case 8:\n          _context2.next = 10;\n          return put(conversationActions.setCurrentConversationMessages({\n            result: response.result,\n            partnerId: partnerId\n          }));\n\n        case 10:\n          _context2.next = 17;\n          break;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](2);\n          _context2.next = 16;\n          return put(messageActions.getMessagesReceived());\n\n        case 16:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[2, 12]]);\n}\n\nfunction deleteMessageFetchSaga(action) {\n  var _action$params, messageId, partnerId, body;\n\n  return _regeneratorRuntime.wrap(function deleteMessageFetchSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _action$params = action.params, messageId = _action$params.messageId, partnerId = _action$params.partnerId;\n          body = {\n            messageId: messageId,\n            partnerId: partnerId\n          };\n          _context3.prev = 2;\n          _context3.next = 5;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.MESSAGE),\n            method: constants.API.METHODS.DELETE,\n            body: body\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put(messageActions.deleteMessageReceived());\n\n        case 7:\n          _context3.next = 9;\n          return put(conversationActions.removeMessageFromConversation({\n            messageId: messageId,\n            partnerId: partnerId\n          }));\n\n        case 9:\n          _context3.next = 16;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 15;\n          return put(messageActions.deleteMessageReceived());\n\n        case 15:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[2, 11]]);\n}\n\nvar sagas = [takeEvery(POST_MESSAGE, sendMessagePostFetchSaga), takeLatest(GET_MESSAGES, getMessagesFetchSaga), takeEvery(DELETE_MESSAGE, deleteMessageFetchSaga)];\nexport default sagas;","map":{"version":3,"sources":["/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/src/redux/sagas/message/index.js"],"names":["sendMessagePostFetchSaga","getMessagesFetchSaga","deleteMessageFetchSaga","takeLatest","takeEvery","put","sendRequest","POST_MESSAGE","GET_MESSAGES","DELETE_MESSAGE","toast","constants","messageActions","conversationActions","action","body","params","url","API","ROOT","ACTIONS","MESSAGE","method","METHODS","POST","response","postMessageReceived","addMessageToCurrentConversationMessages","message","currentUserIsSender","result","partner","_id","receiverId","error","LABELS","MAIN","GLOBAL_ERROR","partnerId","query","GET","getMessagesReceived","setCurrentConversationMessages","messageId","DELETE","deleteMessageReceived","removeMessageFromConversation","sagas"],"mappings":"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","sourcesContent":["import { takeLatest, takeEvery, put } from \"redux-saga/effects\";\n\nimport { sendRequest } from \"modules/utils\";\n\nimport {\n\tPOST_MESSAGE,\n\tGET_MESSAGES,\n\tDELETE_MESSAGE\n} from \"redux/constants/message\";\n\nimport { toast } from \"react-toastify\";\n\nimport constants from \"modules/constants\";\nimport * as messageActions from \"redux/actions/message\";\nimport * as conversationActions from \"redux/actions/conversation\";\n\nfunction* sendMessagePostFetchSaga(action) {\n\tconst { body } = action.params;\n\n\ttry {\n\t\tconst response = yield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.MESSAGE}`,\n\t\t\tmethod: constants.API.METHODS.POST,\n\t\t\tbody\n\t\t});\n\n\t\tyield put(messageActions.postMessageReceived());\n\n\t\tyield put(\n\t\t\tconversationActions.addMessageToCurrentConversationMessages({\n\t\t\t\tmessage: {\n\t\t\t\t\tcurrentUserIsSender: true,\n\t\t\t\t\t...response.result\n\t\t\t\t},\n\t\t\t\tpartner: {\n\t\t\t\t\t_id: response.result.receiverId\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} catch (e) {\n\t\tyield put(messageActions.postMessageReceived());\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nfunction* getMessagesFetchSaga(action) {\n\tconst { partnerId } = action.params;\n\n\tconst query = {\n\t\tpartnerId\n\t};\n\n\ttry {\n\t\tconst response = yield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.MESSAGE}`,\n\t\t\tmethod: constants.API.METHODS.GET,\n\t\t\tquery\n\t\t});\n\n\t\tyield put(messageActions.getMessagesReceived());\n\t\tyield put(\n\t\t\tconversationActions.setCurrentConversationMessages({\n\t\t\t\tresult: response.result,\n\t\t\t\tpartnerId\n\t\t\t})\n\t\t);\n\t} catch (e) {\n\t\tyield put(messageActions.getMessagesReceived());\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nfunction* deleteMessageFetchSaga(action) {\n\tconst { messageId, partnerId } = action.params;\n\n\tconst body = {\n\t\tmessageId,\n\t\tpartnerId\n\t};\n\n\ttry {\n\t\tyield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.MESSAGE}`,\n\t\t\tmethod: constants.API.METHODS.DELETE,\n\t\t\tbody\n\t\t});\n\n\t\tyield put(messageActions.deleteMessageReceived());\n\t\tyield put(\n\t\t\tconversationActions.removeMessageFromConversation({\n\t\t\t\tmessageId,\n\t\t\t\tpartnerId\n\t\t\t})\n\t\t);\n\t} catch (e) {\n\t\tyield put(messageActions.deleteMessageReceived());\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nconst sagas = [\n\ttakeEvery(POST_MESSAGE, sendMessagePostFetchSaga),\n\ttakeLatest(GET_MESSAGES, getMessagesFetchSaga),\n\ttakeEvery(DELETE_MESSAGE, deleteMessageFetchSaga)\n];\n\nexport default sagas;\n"]},"metadata":{},"sourceType":"module"}