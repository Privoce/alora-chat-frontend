{"ast":null,"code":"import _classCallCheck from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/src/entries/chat/wrappers/chat/index.jsx\";\nimport React, { Component } from 'react';\nimport { ContentEditableComponent, IconComponent, LabelComponent, ButtonComponent } from 'shared/components';\nimport { UserInfoComponent } from 'entries/chat/components';\nimport { MessageListContainer } from 'entries/chat/containers';\nimport { connect } from 'react-redux';\nimport { confirmAlert } from 'react-confirm-alert';\nimport { bindActionCreators } from 'redux';\nimport constants from 'modules/constants';\nimport * as conversationActions from 'redux/actions/conversation';\nimport * as messageActions from 'redux/actions/message';\n\nvar ChatWrapper =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatWrapper, _Component);\n\n  function ChatWrapper(props) {\n    var _this;\n\n    _classCallCheck(this, ChatWrapper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatWrapper).call(this, props));\n\n    _this.setConversationIsRead = function () {\n      var _this$props = _this.props,\n          conversationData = _this$props.conversationData,\n          conversationActions = _this$props.conversationActions;\n      var resetConversationUnreadMessages = conversationActions.resetConversationUnreadMessages;\n      var currentPartnerIdConversation = conversationData.currentPartnerIdConversation,\n          conversations = conversationData.result;\n      var currentConversation = conversations.find(function (item) {\n        return String(item.partnerId._id) === String(currentPartnerIdConversation);\n      });\n      var partnerId = currentConversation.partnerId,\n          unreadMessages = currentConversation.unreadMessages;\n\n      if (unreadMessages > 0) {\n        resetConversationUnreadMessages({\n          partner: partnerId\n        });\n      }\n    };\n\n    _this.handleSendMessage = function (message) {\n      if (message) {\n        var _this$props2 = _this.props,\n            conversationData = _this$props2.conversationData,\n            _messageActions = _this$props2.messageActions;\n        var currentPartnerIdConversation = conversationData.currentPartnerIdConversation;\n        var params = {\n          body: {\n            message: message,\n            receiverId: currentPartnerIdConversation\n          }\n        };\n\n        _messageActions.postMessage(params);\n      }\n    };\n\n    _this.handleDeleteMessage = function (messageId) {\n      var _this$props3 = _this.props,\n          messageActions = _this$props3.messageActions,\n          conversationData = _this$props3.conversationData;\n      var partnerId = conversationData.currentPartnerIdConversation;\n      confirmAlert({\n        customUI: function customUI(_ref) {\n          var onClose = _ref.onClose;\n          return React.createElement(\"div\", {\n            className: \"confirm-popup\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }, React.createElement(LabelComponent, {\n            fontSemiBold: true,\n            text: constants.LABELS.CHAT.DELETE_MESSAGE_CONFIRM,\n            fontSize: 30,\n            alignCenter: true,\n            margin: \"0px 0px 25px 0px\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            className: \"buttons-container\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, React.createElement(ButtonComponent, {\n            type: \"button\",\n            defaultButton: true,\n            small: true,\n            outline: true,\n            text: constants.LABELS.MAIN.NO,\n            margin: \"10px\",\n            width: 100,\n            onClick: onClose,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }), React.createElement(ButtonComponent, {\n            type: \"button\",\n            defaultButton: true,\n            small: true,\n            outline: true,\n            text: constants.LABELS.MAIN.YES,\n            margin: \"10px\",\n            width: 100,\n            onClick: function onClick() {\n              messageActions.deleteMessage({\n                messageId: messageId,\n                partnerId: partnerId\n              });\n              onClose();\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          })));\n        }\n      });\n    };\n\n    _this.getCurrentConversationMessages = function (messages) {\n      var messageData = _this.props.messageData;\n      var deleteMessage = messageData.deleteMessage;\n      return messages.map(function (message) {\n        var newItem = message;\n        newItem.isFetchingAction = deleteMessage.isFetching && String(deleteMessage.currentMessageIdIsDeleting) === String(message._id);\n        return message;\n      });\n    };\n\n    _this.renderChatContainer = function () {\n      var _this$props4 = _this.props,\n          conversationData = _this$props4.conversationData,\n          messageData = _this$props4.messageData;\n      var getMessages = messageData.getMessages;\n      var currentPartnerIdConversation = conversationData.currentPartnerIdConversation,\n          conversations = conversationData.result;\n\n      if (!currentPartnerIdConversation) {\n        return React.createElement(\"div\", {\n          className: \"empty-message-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, React.createElement(IconComponent, {\n          icon: \"chat-emoji\",\n          width: 200,\n          height: 200,\n          margin: \"0px 0px 25px 20px\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }));\n      }\n\n      var currentConversation = conversations.find(function (item) {\n        return String(item.partnerId._id) === String(currentPartnerIdConversation);\n      });\n      var _currentConversation$ = currentConversation.partnerId,\n          nickname = _currentConversation$.nickname,\n          profileColor = _currentConversation$.profileColor;\n      return React.createElement(\"div\", {\n        className: \"chat-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"header-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(UserInfoComponent, {\n        isFetching: false,\n        sketchDark: true,\n        profile: {\n          label: nickname,\n          width: 40,\n          height: 40,\n          backgroundColor: profileColor,\n          color: 'white',\n          labelFontSize: 14\n        },\n        title: {\n          text: nickname,\n          fontSize: 13,\n          margin: '0px 0px 0px 14px'\n        },\n        desc: {\n          text: '',\n          fontSize: 13,\n          maxWidth: 100,\n          margin: '0px 0px 0px 14px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      })), React.createElement(\"section\", {\n        ref: _this.conversationContainer,\n        className: \"conversation-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(MessageListContainer, {\n        isFetching: getMessages.isFetching,\n        items: _this.getCurrentConversationMessages(currentConversation.messages),\n        onMouseOver: _this.setConversationIsRead,\n        onFocus: _this.setConversationIsRead,\n        handleDeleteMessage: _this.handleDeleteMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      })), React.createElement(\"footer\", {\n        className: \"footer-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(ContentEditableComponent, {\n        onEnter: _this.handleSendMessage,\n        onFocus: _this.setConversationIsRead,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      })));\n    };\n\n    _this.conversationContainer = React.createRef();\n    return _this;\n  }\n\n  _createClass(ChatWrapper, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var current = this.conversationContainer.current;\n\n      if (current) {\n        current.scrollTop = current.scrollHeight;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"chat-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, this.renderChatContainer());\n    }\n  }]);\n\n  return ChatWrapper;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    conversationData: state.conversation,\n    messageData: state.message\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    conversationActions: bindActionCreators(conversationActions, dispatch),\n    messageActions: bindActionCreators(messageActions, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatWrapper);","map":{"version":3,"sources":["/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/src/entries/chat/wrappers/chat/index.jsx"],"names":["React","Component","ContentEditableComponent","IconComponent","LabelComponent","ButtonComponent","UserInfoComponent","MessageListContainer","connect","confirmAlert","bindActionCreators","constants","conversationActions","messageActions","ChatWrapper","props","setConversationIsRead","conversationData","resetConversationUnreadMessages","currentPartnerIdConversation","conversations","result","currentConversation","find","item","String","partnerId","_id","unreadMessages","partner","handleSendMessage","message","params","body","receiverId","postMessage","handleDeleteMessage","messageId","customUI","onClose","LABELS","CHAT","DELETE_MESSAGE_CONFIRM","MAIN","NO","YES","deleteMessage","getCurrentConversationMessages","messages","messageData","map","newItem","isFetchingAction","isFetching","currentMessageIdIsDeleting","renderChatContainer","getMessages","nickname","profileColor","label","width","height","backgroundColor","color","labelFontSize","text","fontSize","margin","maxWidth","conversationContainer","createRef","current","scrollTop","scrollHeight","mapStateToProps","state","conversation","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {\n\tComponent\n} from 'react';\n\nimport {\n\tContentEditableComponent,\n\tIconComponent,\n\tLabelComponent,\n\tButtonComponent\n} from 'shared/components';\n\nimport {\n\tUserInfoComponent\n} from 'entries/chat/components';\n\nimport {\n\tMessageListContainer\n} from 'entries/chat/containers';\n\nimport {\n\tconnect\n} from 'react-redux';\n\nimport {\n\tconfirmAlert\n} from 'react-confirm-alert';\n\nimport {\n\tbindActionCreators\n} from 'redux';\n\nimport constants from 'modules/constants';\nimport * as conversationActions from 'redux/actions/conversation';\nimport * as messageActions from 'redux/actions/message';\n\nclass ChatWrapper extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.conversationContainer = React.createRef();\n\t}\n\n\tcomponentDidUpdate () {\n\t\tconst {\n\t\t\tcurrent\n\t\t} = this.conversationContainer;\n\n\n\t\tif (current) {\n\t\t\tcurrent.scrollTop = current.scrollHeight;\n\t\t}\n\t}\n\n\tsetConversationIsRead = () => {\n\t\tconst {\n\t\t\tconversationData,\n\t\t\tconversationActions\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\tresetConversationUnreadMessages\n\t\t} = conversationActions;\n\n\t\tconst {\n\t\t\tcurrentPartnerIdConversation,\n\t\t\tresult: conversations\n\t\t} = conversationData;\n\n\t\tconst currentConversation = conversations.find(item => String(item.partnerId._id) === String(currentPartnerIdConversation));\n\n\t\tconst {\n\t\t\tpartnerId,\n\t\t\tunreadMessages\n\t\t} = currentConversation;\n\n\t\tif (unreadMessages > 0) {\n\t\t\tresetConversationUnreadMessages({\n\t\t\t\tpartner: partnerId\n\t\t\t});\n\t\t}\n\t}\n\n\thandleSendMessage = (message) => {\n\t\tif (message) {\n\t\t\tconst {\n\t\t\t\tconversationData,\n\t\t\t\tmessageActions\n\t\t\t} = this.props;\n\n\t\t\tconst {\n\t\t\t\tcurrentPartnerIdConversation\n\t\t\t} = conversationData;\n\n\t\t\tconst params = {\n\t\t\t\tbody: {\n\t\t\t\t\tmessage,\n\t\t\t\t\treceiverId: currentPartnerIdConversation\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tmessageActions.postMessage(params);\n\t\t}\n\t}\n\n\thandleDeleteMessage = (messageId) => {\n\t\tconst {\n\t\t\tmessageActions,\n\t\t\tconversationData\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\tcurrentPartnerIdConversation: partnerId\n\t\t} = conversationData;\n\n\n\t\tconfirmAlert({\n\t\t\tcustomUI: ({ onClose }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className='confirm-popup'>\n\t\t\t\t\t\t<LabelComponent\n\t\t\t\t\t\t\tfontSemiBold\n\t\t\t\t\t\t\ttext={constants.LABELS.CHAT.DELETE_MESSAGE_CONFIRM}\n\t\t\t\t\t\t\tfontSize={30}\n\t\t\t\t\t\t\talignCenter\n\t\t\t\t\t\t\tmargin=\"0px 0px 25px 0px\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className='buttons-container'>\n\t\t\t\t\t\t\t<ButtonComponent\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tdefaultButton\n\t\t\t\t\t\t\t\tsmall\n\t\t\t\t\t\t\t\toutline\n\t\t\t\t\t\t\t\ttext={constants.LABELS.MAIN.NO}\n\t\t\t\t\t\t\t\tmargin=\"10px\"\n\t\t\t\t\t\t\t\twidth={100}\n\t\t\t\t\t\t\t\tonClick={onClose}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ButtonComponent\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tdefaultButton\n\t\t\t\t\t\t\t\tsmall\n\t\t\t\t\t\t\t\toutline\n\t\t\t\t\t\t\t\ttext={constants.LABELS.MAIN.YES}\n\t\t\t\t\t\t\t\tmargin=\"10px\"\n\t\t\t\t\t\t\t\twidth={100}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tmessageActions.deleteMessage({\n\t\t\t\t\t\t\t\t\t\tmessageId,\n\t\t\t\t\t\t\t\t\t\tpartnerId\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetCurrentConversationMessages = (messages) => {\n\t\tconst {\n\t\t\tmessageData\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\tdeleteMessage\n\t\t} = messageData;\n\n\t\treturn messages.map(message => {\n\t\t\tconst newItem = message;\n\t\t\tnewItem.isFetchingAction = (\n\t\t\t\tdeleteMessage.isFetching\n\t\t\t\t&& String(deleteMessage.currentMessageIdIsDeleting) === String(message._id)\n\t\t\t);\n\t\t\treturn message;\n\t\t});\n\t}\n\n\trenderChatContainer = () => {\n\t\tconst {\n\t\t\tconversationData,\n\t\t\tmessageData\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\tgetMessages\n\t\t} = messageData;\n\n\t\tconst {\n\t\t\tcurrentPartnerIdConversation,\n\t\t\tresult: conversations\n\t\t} = conversationData;\n\n\t\tif (!currentPartnerIdConversation) {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName='empty-message-container'\n\t\t\t\t>\n\t\t\t\t\t<IconComponent\n\t\t\t\t\t\ticon=\"chat-emoji\"\n\t\t\t\t\t\twidth={200}\n\t\t\t\t\t\theight={200}\n\t\t\t\t\t\tmargin='0px 0px 25px 20px'\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\tconst currentConversation = conversations.find(item => String(item.partnerId._id) === String(currentPartnerIdConversation));\n\n\t\tconst {\n\t\t\tnickname,\n\t\t\tprofileColor\n\t\t} = currentConversation.partnerId;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName='chat-content'\n\t\t\t>\n\t\t\t\t<header className='header-container'>\n\t\t\t\t\t<UserInfoComponent\n\t\t\t\t\t\tisFetching={false}\n\t\t\t\t\t\tsketchDark\n\t\t\t\t\t\tprofile={{\n\t\t\t\t\t\t\tlabel: nickname,\n\t\t\t\t\t\t\twidth: 40,\n\t\t\t\t\t\t\theight: 40,\n\t\t\t\t\t\t\tbackgroundColor: profileColor,\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tlabelFontSize: 14\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttitle={{\n\t\t\t\t\t\t\ttext: nickname,\n\t\t\t\t\t\t\tfontSize: 13,\n\t\t\t\t\t\t\tmargin: '0px 0px 0px 14px'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdesc={{\n\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\tfontSize: 13,\n\t\t\t\t\t\t\tmaxWidth: 100,\n\t\t\t\t\t\t\tmargin: '0px 0px 0px 14px'\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</header>\n\t\t\t\t<section\n\t\t\t\t\tref={this.conversationContainer}\n\t\t\t\t\tclassName='conversation-container'\n\t\t\t\t>\n\t\t\t\t\t<MessageListContainer\n\t\t\t\t\t\tisFetching={getMessages.isFetching}\n\t\t\t\t\t\titems={this.getCurrentConversationMessages(currentConversation.messages)}\n\t\t\t\t\t\tonMouseOver={this.setConversationIsRead}\n\t\t\t\t\t\tonFocus={this.setConversationIsRead}\n\t\t\t\t\t\thandleDeleteMessage={this.handleDeleteMessage}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t\t<footer className='footer-container'>\n\t\t\t\t\t<ContentEditableComponent\n\t\t\t\t\t\tonEnter={this.handleSendMessage}\n\t\t\t\t\t\tonFocus={this.setConversationIsRead}\n\t\t\t\t\t/>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className='chat-container'>\n\t\t\t\t{\n\t\t\t\t\tthis.renderChatContainer()\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tconversationData: state.conversation,\n\t\tmessageData: state.message\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tconversationActions: bindActionCreators(conversationActions, dispatch),\n\t\tmessageActions: bindActionCreators(messageActions, dispatch)\n\t};\n};\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(ChatWrapper);\n"]},"metadata":{},"sourceType":"module"}