{"ast":null,"code":"import _regeneratorRuntime from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(read),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleIO),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(startChanelSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(stopChanelSaga);\n\nimport { getToken, logout } from 'modules/utils';\nimport { toast } from 'react-toastify';\nimport { eventChannel } from 'redux-saga';\nimport { put, call, fork, take, cancel, takeLatest } from 'redux-saga/effects';\nimport { Howl } from 'howler';\nimport { START_CHANNEL, STOP_CHANNEL } from 'redux/constants/socket';\nimport constants from 'modules/constants';\nimport io from 'socket.io-client';\nimport * as socketActions from 'redux/actions/socket';\nimport * as conversationActions from 'redux/actions/conversation';\nvar socket;\nvar socketTask;\n\nfunction connectSocket() {\n  var socket = io(constants.API.ROOT);\n  return new Promise(function (resolve) {\n    socket.on('connect', function () {\n      resolve(socket);\n    });\n  });\n}\n\nfunction subscribe(socket) {\n  return eventChannel(function (emit) {\n    socket.on('message.new', function (response) {\n      var addMessageToCurrentConversationMessages = conversationActions.addMessageToCurrentConversationMessages,\n          incrementConversationUnreadMessages = conversationActions.incrementConversationUnreadMessages,\n          videoCallCalling = conversationActions.videoCallCalling;\n      var sound = new Howl({\n        src: [\"\".concat(process.env.PUBLIC_URL).concat(constants.GLOBAL.MESSAGE_RECEIVED_MP3)]\n      });\n      sound.play();\n      var message = response.message,\n          sender = response.sender;\n      emit(addMessageToCurrentConversationMessages({\n        message: message,\n        partner: sender\n      }));\n      emit(incrementConversationUnreadMessages({\n        partner: sender\n      }));\n    });\n    socket.on('videocall.calling', function (response) {\n      alert('ta ligando');\n      var videoCallCalling = conversationActions.videoCallCalling;\n      emit(videoCallCalling({\n        nothing: true\n      }));\n    });\n    socket.on('disconnect', function () {\n      emit(socketActions.startChannel());\n    });\n    socket.on('login-error', function () {\n      logout();\n    });\n    return function () {};\n  });\n}\n\nfunction login(socket) {\n  var token;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = getToken();\n          _context.next = 3;\n          return socket.emit('login', {\n            token: token\n          });\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction read(socket) {\n  var channel, action;\n  return _regeneratorRuntime.wrap(function read$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return call(subscribe, socket);\n\n        case 2:\n          channel = _context2.sent;\n\n        case 3:\n          if (!true) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 6;\n          return take(channel);\n\n        case 6:\n          action = _context2.sent;\n          _context2.next = 9;\n          return put(action);\n\n        case 9:\n          _context2.next = 3;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction handleIO(socket) {\n  return _regeneratorRuntime.wrap(function handleIO$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return fork(login, socket);\n\n        case 2:\n          _context3.next = 4;\n          return fork(read, socket);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction startChanelSaga() {\n  return _regeneratorRuntime.wrap(function startChanelSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return put(socketActions.stopChannel());\n\n        case 3:\n          _context4.next = 5;\n          return call(connectSocket);\n\n        case 5:\n          socket = _context4.sent;\n          _context4.next = 8;\n          return put(socketActions.serverOn());\n\n        case 8:\n          _context4.next = 10;\n          return fork(handleIO, socket);\n\n        case 10:\n          socketTask = _context4.sent;\n          _context4.next = 16;\n          break;\n\n        case 13:\n          _context4.prev = 13;\n          _context4.t0 = _context4[\"catch\"](0);\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 16:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this, [[0, 13]]);\n}\n\nfunction stopChanelSaga() {\n  return _regeneratorRuntime.wrap(function stopChanelSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (socket) {\n            socket.off();\n            socket.disconnect();\n          }\n\n          _context5.next = 3;\n          return cancel(socketTask);\n\n        case 3:\n          _context5.next = 5;\n          return put(socketActions.serverOff());\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nvar sagas = [takeLatest(START_CHANNEL, startChanelSaga), takeLatest(STOP_CHANNEL, stopChanelSaga)];\nexport default sagas;","map":{"version":3,"sources":["/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/src/redux/sagas/socket/index.js"],"names":["login","read","handleIO","startChanelSaga","stopChanelSaga","getToken","logout","toast","eventChannel","put","call","fork","take","cancel","takeLatest","Howl","START_CHANNEL","STOP_CHANNEL","constants","io","socketActions","conversationActions","socket","socketTask","connectSocket","API","ROOT","Promise","resolve","on","subscribe","emit","response","addMessageToCurrentConversationMessages","incrementConversationUnreadMessages","videoCallCalling","sound","src","process","env","PUBLIC_URL","GLOBAL","MESSAGE_RECEIVED_MP3","play","message","sender","partner","alert","nothing","startChannel","token","channel","action","stopChannel","serverOn","error","LABELS","MAIN","GLOBAL_ERROR","off","disconnect","serverOff","sagas"],"mappings":";;;;yBAiFUA,K;;;yBAOAC,I;;;yBAQAC,Q;;;yBAKAC,e;;;yBAWAC,c;;AAhHV,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,eAAjC;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,UAAxC,QAA0D,oBAA1D;AAEA,SAASC,IAAT,QAAqB,QAArB;AAEA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,KAAKC,aAAZ,MAA+B,sBAA/B;AACA,OAAO,KAAKC,mBAAZ,MAAqC,4BAArC;AAEA,IAAIC,MAAJ;AACA,IAAIC,UAAJ;;AAEA,SAASC,aAAT,GAAyB;AACxB,MAAMF,MAAM,GAAGH,EAAE,CAACD,SAAS,CAACO,GAAV,CAAcC,IAAf,CAAjB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC7BN,IAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,YAAM;AAC1BD,MAAAA,OAAO,CAACN,MAAD,CAAP;AACA,KAFD;AAGA,GAJM,CAAP;AAKA;;AAED,SAASQ,SAAT,CAAmBR,MAAnB,EAA2B;AAC1B,SAAOd,YAAY,CAAC,UAAAuB,IAAI,EAAI;AAC3BT,IAAAA,MAAM,CAACO,EAAP,CAAU,aAAV,EAAyB,UAAAG,QAAQ,EAAI;AAAA,UAEnCC,uCAFmC,GAKhCZ,mBALgC,CAEnCY,uCAFmC;AAAA,UAGnCC,mCAHmC,GAKhCb,mBALgC,CAGnCa,mCAHmC;AAAA,UAInCC,gBAJmC,GAKhCd,mBALgC,CAInCc,gBAJmC;AAOpC,UAAMC,KAAK,GAAG,IAAIrB,IAAJ,CAAS;AACtBsB,QAAAA,GAAG,EAAE,WACDC,OAAO,CAACC,GAAR,CAAYC,UADX,SAEHtB,SAAS,CAACuB,MAAV,CAAiBC,oBAFd;AADiB,OAAT,CAAd;AAQAN,MAAAA,KAAK,CAACO,IAAN;AAfoC,UAiB5BC,OAjB4B,GAiBRZ,QAjBQ,CAiB5BY,OAjB4B;AAAA,UAiBnBC,MAjBmB,GAiBRb,QAjBQ,CAiBnBa,MAjBmB;AAmBpCd,MAAAA,IAAI,CACHE,uCAAuC,CAAC;AACvCW,QAAAA,OAAO,EAAPA,OADuC;AAEvCE,QAAAA,OAAO,EAAED;AAF8B,OAAD,CADpC,CAAJ;AAMAd,MAAAA,IAAI,CACHG,mCAAmC,CAAC;AACnCY,QAAAA,OAAO,EAAED;AAD0B,OAAD,CADhC,CAAJ;AAKA,KA9BD;AAgCAvB,IAAAA,MAAM,CAACO,EAAP,CAAU,mBAAV,EAA+B,UAAAG,QAAQ,EAAI;AAC1Ce,MAAAA,KAAK,CAAC,YAAD,CAAL;AAD0C,UAElCZ,gBAFkC,GAEbd,mBAFa,CAElCc,gBAFkC;AAG1CJ,MAAAA,IAAI,CAACI,gBAAgB,CAAC;AAAEa,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAjB,CAAJ;AACA,KAJD;AAMA1B,IAAAA,MAAM,CAACO,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC7BE,MAAAA,IAAI,CAACX,aAAa,CAAC6B,YAAd,EAAD,CAAJ;AACA,KAFD;AAIA3B,IAAAA,MAAM,CAACO,EAAP,CAAU,aAAV,EAAyB,YAAM;AAC9BvB,MAAAA,MAAM;AACN,KAFD;AAIA,WAAO,YAAM,CAAE,CAAf;AACA,GAhDkB,CAAnB;AAiDA;;AAED,SAAUN,KAAV,CAAgBsB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACO4B,UAAAA,KADP,GACe7C,QAAQ,EADvB;AAAA;AAEC,iBAAMiB,MAAM,CAACS,IAAP,CAAY,OAAZ,EAAqB;AAC1BmB,YAAAA,KAAK,EAALA;AAD0B,WAArB,CAAN;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAUjD,IAAV,CAAeqB,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACiB,iBAAMZ,IAAI,CAACoB,SAAD,EAAYR,MAAZ,CAAV;;AADjB;AACO6B,UAAAA,OADP;;AAAA;AAAA,eAEQ,IAFR;AAAA;AAAA;AAAA;;AAAA;AAGiB,iBAAMvC,IAAI,CAACuC,OAAD,CAAV;;AAHjB;AAGQC,UAAAA,MAHR;AAAA;AAIE,iBAAM3C,GAAG,CAAC2C,MAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUlD,QAAV,CAAmBoB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMX,IAAI,CAACX,KAAD,EAAQsB,MAAR,CAAV;;AADD;AAAA;AAEC,iBAAMX,IAAI,CAACV,IAAD,EAAOqB,MAAP,CAAV;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUnB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,iBAAMM,GAAG,CAACW,aAAa,CAACiC,WAAd,EAAD,CAAT;;AAFF;AAAA;AAGW,iBAAM3C,IAAI,CAACc,aAAD,CAAV;;AAHX;AAGEF,UAAAA,MAHF;AAAA;AAIE,iBAAMb,GAAG,CAACW,aAAa,CAACkC,QAAd,EAAD,CAAT;;AAJF;AAAA;AAKe,iBAAM3C,IAAI,CAACT,QAAD,EAAWoB,MAAX,CAAV;;AALf;AAKEC,UAAAA,UALF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOEhB,UAAAA,KAAK,CAACgD,KAAN,CAAYrC,SAAS,CAACsC,MAAV,CAAiBC,IAAjB,CAAsBC,YAAlC;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUtD,cAAV;AAAA;AAAA;AAAA;AAAA;AACC,cAAIkB,MAAJ,EAAY;AACXA,YAAAA,MAAM,CAACqC,GAAP;AACArC,YAAAA,MAAM,CAACsC,UAAP;AACA;;AAJF;AAMC,iBAAM/C,MAAM,CAACU,UAAD,CAAZ;;AAND;AAAA;AAOC,iBAAMd,GAAG,CAACW,aAAa,CAACyC,SAAd,EAAD,CAAT;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,IAAMC,KAAK,GAAG,CACbhD,UAAU,CAACE,aAAD,EAAgBb,eAAhB,CADG,EAEbW,UAAU,CAACG,YAAD,EAAeb,cAAf,CAFG,CAAd;AAKA,eAAe0D,KAAf","sourcesContent":["import { getToken, logout } from 'modules/utils';\n\nimport { toast } from 'react-toastify';\n\nimport { eventChannel } from 'redux-saga';\n\nimport { put, call, fork, take, cancel, takeLatest } from 'redux-saga/effects';\n\nimport { Howl } from 'howler';\n\nimport { START_CHANNEL, STOP_CHANNEL } from 'redux/constants/socket';\n\nimport constants from 'modules/constants';\nimport io from 'socket.io-client';\nimport * as socketActions from 'redux/actions/socket';\nimport * as conversationActions from 'redux/actions/conversation';\n\nlet socket;\nlet socketTask;\n\nfunction connectSocket() {\n\tconst socket = io(constants.API.ROOT);\n\treturn new Promise(resolve => {\n\t\tsocket.on('connect', () => {\n\t\t\tresolve(socket);\n\t\t});\n\t});\n}\n\nfunction subscribe(socket) {\n\treturn eventChannel(emit => {\n\t\tsocket.on('message.new', response => {\n\t\t\tconst {\n\t\t\t\taddMessageToCurrentConversationMessages,\n\t\t\t\tincrementConversationUnreadMessages,\n\t\t\t\tvideoCallCalling\n\t\t\t} = conversationActions;\n\n\t\t\tconst sound = new Howl({\n\t\t\t\tsrc: [\n\t\t\t\t\t`${process.env.PUBLIC_URL}${\n\t\t\t\t\t\tconstants.GLOBAL.MESSAGE_RECEIVED_MP3\n\t\t\t\t\t}`\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tsound.play();\n\n\t\t\tconst { message, sender } = response;\n\n\t\t\temit(\n\t\t\t\taddMessageToCurrentConversationMessages({\n\t\t\t\t\tmessage,\n\t\t\t\t\tpartner: sender\n\t\t\t\t})\n\t\t\t);\n\t\t\temit(\n\t\t\t\tincrementConversationUnreadMessages({\n\t\t\t\t\tpartner: sender\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\n\t\tsocket.on('videocall.calling', response => {\n\t\t\talert('ta ligando');\n\t\t\tconst { videoCallCalling } = conversationActions;\n\t\t\temit(videoCallCalling({ nothing: true }));\n\t\t});\n\n\t\tsocket.on('disconnect', () => {\n\t\t\temit(socketActions.startChannel());\n\t\t});\n\n\t\tsocket.on('login-error', () => {\n\t\t\tlogout();\n\t\t});\n\n\t\treturn () => {};\n\t});\n}\n\nfunction* login(socket) {\n\tconst token = getToken();\n\tyield socket.emit('login', {\n\t\ttoken\n\t});\n}\n\nfunction* read(socket) {\n\tconst channel = yield call(subscribe, socket);\n\twhile (true) {\n\t\tconst action = yield take(channel);\n\t\tyield put(action);\n\t}\n}\n\nfunction* handleIO(socket) {\n\tyield fork(login, socket);\n\tyield fork(read, socket);\n}\n\nfunction* startChanelSaga() {\n\ttry {\n\t\tyield put(socketActions.stopChannel());\n\t\tsocket = yield call(connectSocket);\n\t\tyield put(socketActions.serverOn());\n\t\tsocketTask = yield fork(handleIO, socket);\n\t} catch (e) {\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nfunction* stopChanelSaga() {\n\tif (socket) {\n\t\tsocket.off();\n\t\tsocket.disconnect();\n\t}\n\n\tyield cancel(socketTask);\n\tyield put(socketActions.serverOff());\n}\n\nconst sagas = [\n\ttakeLatest(START_CHANNEL, startChanelSaga),\n\ttakeLatest(STOP_CHANNEL, stopChanelSaga)\n];\n\nexport default sagas;\n"]},"metadata":{},"sourceType":"module"}