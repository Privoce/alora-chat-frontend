{"ast":null,"code":"import _regeneratorRuntime from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addContactPostFetch),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getContactsGetFetch),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteContactFetchSaga);\n\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { sendRequest } from 'modules/utils';\nimport { POST_ADD_CONTACT, GET_CONTACTS, DELETE_CONTACT } from 'redux/constants/contact';\nimport * as contactActions from 'redux/actions/contact';\nimport constants from 'modules/constants';\n\nfunction addContactPostFetch(props) {\n  var params, body, successMessages, response;\n  return _regeneratorRuntime.wrap(function addContactPostFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          params = props.params;\n          body = params.body;\n          successMessages = {};\n          _context.prev = 3;\n          _context.next = 6;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.CONTACT),\n            method: constants.API.METHODS.POST,\n            body: body\n          });\n\n        case 6:\n          response = _context.sent;\n\n          if (response.success) {\n            successMessages.nickname = constants.LABELS.CONTACT.CONTACT_SUCCESSFULLY_ADDED;\n          }\n\n          _context.next = 10;\n          return put(contactActions.postAddContactReceived({\n            errors: response.errors,\n            successMessages: successMessages\n          }));\n\n        case 10:\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](3);\n          _context.next = 16;\n          return put(contactActions.postAddContactReceived());\n\n        case 16:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[3, 12]]);\n}\n\nfunction getContactsGetFetch() {\n  var response;\n  return _regeneratorRuntime.wrap(function getContactsGetFetch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.CONTACT),\n            method: constants.API.METHODS.GET\n          });\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put(contactActions.getContactsReceived({\n            result: response.result\n          }));\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(contactActions.getContactsReceived());\n\n        case 12:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[0, 8]]);\n}\n\nfunction deleteContactFetchSaga(action) {\n  var contactId, body;\n  return _regeneratorRuntime.wrap(function deleteContactFetchSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          contactId = action.params.contactId;\n          body = {\n            contactId: contactId\n          };\n          _context3.prev = 2;\n          _context3.next = 5;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.CONTACT),\n            method: constants.API.METHODS.DELETE,\n            body: body\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put(contactActions.removeContact({\n            contactId: contactId\n          }));\n\n        case 7:\n          _context3.next = 9;\n          return put(contactActions.deleteContactReceived());\n\n        case 9:\n          _context3.next = 16;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 15;\n          return put(contactActions.deleteContactReceived());\n\n        case 15:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[2, 11]]);\n}\n\nvar sagas = [takeLatest(POST_ADD_CONTACT, addContactPostFetch), takeLatest(GET_CONTACTS, getContactsGetFetch), takeLatest(DELETE_CONTACT, deleteContactFetchSaga)];\nexport default sagas;","map":{"version":3,"sources":["/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/src/redux/sagas/contact/index.js"],"names":["addContactPostFetch","getContactsGetFetch","deleteContactFetchSaga","put","takeLatest","toast","sendRequest","POST_ADD_CONTACT","GET_CONTACTS","DELETE_CONTACT","contactActions","constants","props","params","body","successMessages","url","API","ROOT","ACTIONS","CONTACT","method","METHODS","POST","response","success","nickname","LABELS","CONTACT_SUCCESSFULLY_ADDED","postAddContactReceived","errors","error","MAIN","GLOBAL_ERROR","GET","getContactsReceived","result","action","contactId","DELETE","removeContact","deleteContactReceived","sagas"],"mappings":"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","sourcesContent":["import {\n\tput,\n\ttakeLatest\n} from 'redux-saga/effects';\n\nimport {\n\ttoast\n} from 'react-toastify';\n\nimport {\n\tsendRequest\n} from 'modules/utils';\n\nimport {\n\tPOST_ADD_CONTACT,\n\tGET_CONTACTS,\n\tDELETE_CONTACT\n} from 'redux/constants/contact';\n\nimport * as contactActions from 'redux/actions/contact';\nimport constants from 'modules/constants';\n\nfunction* addContactPostFetch (props) {\n\tconst {\n\t\tparams\n\t} = props;\n\n\tconst {\n\t\tbody\n\t} = params;\n\n\tconst successMessages = {};\n\n\ttry {\n\t\tconst response = yield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.CONTACT}`,\n\t\t\tmethod: constants.API.METHODS.POST,\n\t\t\tbody\n\t\t});\n\n\t\tif (response.success) {\n\t\t\tsuccessMessages.nickname = constants.LABELS.CONTACT.CONTACT_SUCCESSFULLY_ADDED;\n\t\t}\n\n\t\tyield put(contactActions.postAddContactReceived({\n\t\t\terrors: response.errors,\n\t\t\tsuccessMessages\n\t\t}));\n\t} catch (e) {\n\t\tyield put(contactActions.postAddContactReceived());\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nfunction* getContactsGetFetch () {\n\ttry {\n\t\tconst response = yield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.CONTACT}`,\n\t\t\tmethod: constants.API.METHODS.GET\n\t\t});\n\n\t\tyield put(contactActions.getContactsReceived({\n\t\t\tresult: response.result\n\t\t}));\n\t} catch (e) {\n\t\tyield put(contactActions.getContactsReceived());\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nfunction* deleteContactFetchSaga (action) {\n\tconst {\n\t\tcontactId\n\t} = action.params;\n\n\tconst body = {\n\t\tcontactId\n\t};\n\n\ttry {\n\t\tyield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.CONTACT}`,\n\t\t\tmethod: constants.API.METHODS.DELETE,\n\t\t\tbody\n\t\t});\n\n\t\tyield put(contactActions.removeContact({\n\t\t\tcontactId\n\t\t}));\n\t\tyield put(contactActions.deleteContactReceived());\n\t} catch (e) {\n\t\tyield put(contactActions.deleteContactReceived());\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nconst sagas = [\n\ttakeLatest(POST_ADD_CONTACT, addContactPostFetch),\n\ttakeLatest(GET_CONTACTS, getContactsGetFetch),\n\ttakeLatest(DELETE_CONTACT, deleteContactFetchSaga)\n];\n\nexport default sagas;\n"]},"metadata":{},"sourceType":"module"}