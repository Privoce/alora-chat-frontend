{"ast":null,"code":"import _regeneratorRuntime from \"/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getConversationsFetch),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(resetConversationUnreadtMessagesSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setCurrentConversationSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteConversationFetchSaga);\n\nimport { takeLatest, takeEvery, put } from \"redux-saga/effects\";\nimport { sendRequest } from \"modules/utils\";\nimport { toast } from \"react-toastify\";\nimport { GET_CONVERSATIONS, SET_CURRENT_CONVERSATION, RESET_CONVERSATION_UNREAD_MESSAGES, DELETE_CONVERSATION } from \"redux/constants/conversation\";\nimport * as conversationActions from \"redux/actions/conversation\";\nimport * as messageActions from \"redux/actions/message\";\nimport constants from \"modules/constants\";\n\nfunction getConversationsFetch() {\n  var response;\n  return _regeneratorRuntime.wrap(function getConversationsFetch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.CONVERSATION),\n            method: constants.API.METHODS.GET\n          });\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put(conversationActions.getConversationsReceived({\n            result: response.result\n          }));\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(conversationActions.getConversationsReceived({\n            result: []\n          }));\n\n        case 12:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 8]]);\n}\n\nfunction resetConversationUnreadtMessagesSaga(action) {\n  var partner, body;\n  return _regeneratorRuntime.wrap(function resetConversationUnreadtMessagesSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          partner = action.params.partner;\n          body = {\n            partnerId: partner._id,\n            conversation: {\n              unreadMessages: 0\n            }\n          };\n          _context2.prev = 2;\n          _context2.next = 5;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.CONVERSATION),\n            method: constants.API.METHODS.PUT,\n            body: body\n          });\n\n        case 5:\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](2);\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[2, 7]]);\n}\n\nfunction setCurrentConversationSaga(action) {\n  var partner, partnerId;\n  return _regeneratorRuntime.wrap(function setCurrentConversationSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          alert(\"asdasd\");\n          partner = action.params.partner;\n          partnerId = partner._id;\n          _context3.next = 5;\n          return put(messageActions.getMessages({\n            partnerId: partnerId\n          }));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction deleteConversationFetchSaga(action) {\n  var params, partnerId, body;\n  return _regeneratorRuntime.wrap(function deleteConversationFetchSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          params = action.params;\n          partnerId = params.partnerId;\n          body = {\n            partnerId: partnerId\n          };\n          _context4.prev = 3;\n          _context4.next = 6;\n          return sendRequest({\n            url: \"\".concat(constants.API.ROOT).concat(constants.API.ACTIONS.CONVERSATION),\n            method: constants.API.METHODS.DELETE,\n            body: body\n          });\n\n        case 6:\n          _context4.next = 8;\n          return put(conversationActions.deleteConversationReceived());\n\n        case 8:\n          _context4.next = 10;\n          return put(conversationActions.removeConversation({\n            partnerId: partnerId\n          }));\n\n        case 10:\n          _context4.next = 17;\n          break;\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](3);\n          _context4.next = 16;\n          return put(conversationActions.deleteConversationReceived());\n\n        case 16:\n          toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\n        case 17:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this, [[3, 12]]);\n}\n\nvar sagas = [takeLatest(GET_CONVERSATIONS, getConversationsFetch), takeLatest(SET_CURRENT_CONVERSATION, setCurrentConversationSaga), takeEvery(RESET_CONVERSATION_UNREAD_MESSAGES, resetConversationUnreadtMessagesSaga), takeEvery(DELETE_CONVERSATION, deleteConversationFetchSaga)];\nexport default sagas;","map":{"version":3,"sources":["/home/tulio/Documentos/projetosJs/privoce/react-socketio-nodejs-chatapp/client/src/redux/sagas/conversation/index.js"],"names":["getConversationsFetch","resetConversationUnreadtMessagesSaga","setCurrentConversationSaga","deleteConversationFetchSaga","takeLatest","takeEvery","put","sendRequest","toast","GET_CONVERSATIONS","SET_CURRENT_CONVERSATION","RESET_CONVERSATION_UNREAD_MESSAGES","DELETE_CONVERSATION","conversationActions","messageActions","constants","url","API","ROOT","ACTIONS","CONVERSATION","method","METHODS","GET","response","getConversationsReceived","result","error","LABELS","MAIN","GLOBAL_ERROR","action","partner","params","body","partnerId","_id","conversation","unreadMessages","PUT","alert","getMessages","DELETE","deleteConversationReceived","removeConversation","sagas"],"mappings":"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","sourcesContent":["import { takeLatest, takeEvery, put } from \"redux-saga/effects\";\n\nimport { sendRequest } from \"modules/utils\";\n\nimport { toast } from \"react-toastify\";\n\nimport {\n\tGET_CONVERSATIONS,\n\tSET_CURRENT_CONVERSATION,\n\tRESET_CONVERSATION_UNREAD_MESSAGES,\n\tDELETE_CONVERSATION\n} from \"redux/constants/conversation\";\n\nimport * as conversationActions from \"redux/actions/conversation\";\nimport * as messageActions from \"redux/actions/message\";\nimport constants from \"modules/constants\";\n\nfunction* getConversationsFetch() {\n\ttry {\n\t\tconst response = yield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.CONVERSATION}`,\n\t\t\tmethod: constants.API.METHODS.GET\n\t\t});\n\n\t\tyield put(\n\t\t\tconversationActions.getConversationsReceived({\n\t\t\t\tresult: response.result\n\t\t\t})\n\t\t);\n\t} catch (e) {\n\t\tyield put(\n\t\t\tconversationActions.getConversationsReceived({\n\t\t\t\tresult: []\n\t\t\t})\n\t\t);\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nfunction* resetConversationUnreadtMessagesSaga(action) {\n\tconst { partner } = action.params;\n\n\tconst body = {\n\t\tpartnerId: partner._id,\n\t\tconversation: {\n\t\t\tunreadMessages: 0\n\t\t}\n\t};\n\n\ttry {\n\t\tyield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.CONVERSATION}`,\n\t\t\tmethod: constants.API.METHODS.PUT,\n\t\t\tbody\n\t\t});\n\t} catch (e) {\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nfunction* setCurrentConversationSaga(action) {\n\talert(\"asdasd\");\n\tconst { partner } = action.params;\n\n\tconst { _id: partnerId } = partner;\n\n\tyield put(\n\t\tmessageActions.getMessages({\n\t\t\tpartnerId\n\t\t})\n\t);\n}\n\nfunction* deleteConversationFetchSaga(action) {\n\tconst { params } = action;\n\n\tconst { partnerId } = params;\n\n\tconst body = {\n\t\tpartnerId\n\t};\n\n\ttry {\n\t\tyield sendRequest({\n\t\t\turl: `${constants.API.ROOT}${constants.API.ACTIONS.CONVERSATION}`,\n\t\t\tmethod: constants.API.METHODS.DELETE,\n\t\t\tbody\n\t\t});\n\n\t\tyield put(conversationActions.deleteConversationReceived());\n\t\tyield put(\n\t\t\tconversationActions.removeConversation({\n\t\t\t\tpartnerId\n\t\t\t})\n\t\t);\n\t} catch (e) {\n\t\tyield put(conversationActions.deleteConversationReceived());\n\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n\t}\n}\n\nconst sagas = [\n\ttakeLatest(GET_CONVERSATIONS, getConversationsFetch),\n\ttakeLatest(SET_CURRENT_CONVERSATION, setCurrentConversationSaga),\n\ttakeEvery(\n\t\tRESET_CONVERSATION_UNREAD_MESSAGES,\n\t\tresetConversationUnreadtMessagesSaga\n\t),\n\ttakeEvery(DELETE_CONVERSATION, deleteConversationFetchSaga)\n];\n\nexport default sagas;\n"]},"metadata":{},"sourceType":"module"}